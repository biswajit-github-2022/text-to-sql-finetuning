import streamlit as st
import pandas as pd
from sqlalchemy import create_engine
from transformers import AutoModelForSeq2SeqLM, AutoTokenizer

# Load the pre-trained model and tokenizer
model_path = 'gaussalgo/T5-LM-Large-text2sql-spider'
model = AutoModelForSeq2SeqLM.from_pretrained(model_path)
tokenizer = AutoTokenizer.from_pretrained(model_path)

# Streamlit UI
st.title('SQL Query Generator from Natural Language')
question = st.text_input("Enter your question here:")
schema = st.text_area("Enter your schema here:")

# If question is provided, generate SQL query
if question and schema:
    input_text = " ".join(["Question: ", question, "Schema:", schema])

    # Tokenize the input and generate the SQL query
    model_inputs = tokenizer(input_text, return_tensors="pt")
    outputs = model.generate(**model_inputs, max_length=512)
    output_text = tokenizer.batch_decode(outputs, skip_special_tokens=True)

    # Display the generated SQL query
    st.subheader("Generated SQL Query")
    st.code(output_text[0])

    # Execute the query and show the output table
    if st.button("Show Table"):
        query = output_text[0]  # SQL query generated by the model

        def execute_query(query, host="localhost", user="root", password="passwd", database="movies"):
            if not query.strip():  # Check if the query is empty or just spaces
                st.error("Error: SQL query is empty. Please provide a valid query.")
                return None

            # Create a connection string using SQLAlchemy
            connection_string = f"mysql+pymysql://{user}:{password}@{host}/{database}"
            
            # Create the SQLAlchemy engine
            engine = create_engine(connection_string)
            
            # Execute the query and fetch the data into a DataFrame
            try:
                df = pd.read_sql_query(query, engine)
                return df
            except Exception as e:
                st.error(f"Error executing the query: {e}")
                return None

        # Call the function to fetch the query result
        df = execute_query(query)
        if df is not None:
            st.subheader("Query Result")
            st.dataframe(df)  # Show the result in a table format

            # Option to generate CSV
            if st.button("Generate CSV"):
                output_csv = "output_data.csv"
                df.to_csv(output_csv, index=False)
                st.success(f"CSV file has been saved: {output_csv}")

